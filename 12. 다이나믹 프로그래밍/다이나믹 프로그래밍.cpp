/*
다양한 문제를 풀면서 익히는게 좋다.

다이나믹 프로그래밍(Dynamic Programming, DP)
:여러 개의 하위 문제를 먼저 푼 후 그 결과를 쌓아올려 주어진 문제를 해결하는 알고리즘

문제를 해결하기 위한 점화식을 찾아낸 후, 점화식의 항을 밑에서부터 차례로 구해나가서 
답을 알아내는 형태의 알고리즘.
예) 피보나치 문제에서 재귀를 사용하는 것보다 중간 결과들을 저장하면서 수행하면 연산시간을 줄일 수 있다(?)

DP로 풀기 위해서는 테이블을 정의하고, 점화식을 찾은 후에 초기 값을 정해야 한다.

*/

// 1463번 : 1로 만들기
#include<iostream>
using namespace std;

int d[1000005];
int n;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	d[1] = 0;
	for (int i = 2; i <= n; i++) {
		d[i] = d[i - 1] + 1;
		if (i % 2 == 0) d[i] = min(d[i], d[i / 2] + 1);
		if (i % 3 == 0) d[i] = min(d[i], d[i / 3] + 1);
	}
	cout << d[n];
}